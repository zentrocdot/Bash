#!/bin/bash
# shellcheck disable=SC2001
################################################################################
#
#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
#  ┃                               _ _             _           _    ┃
#  ┃  __ _ _ _  ___ _ _ _  _ _ __ (_) |_ _  _   __| |_  ___ __| |__ ┃
#  ┃ / _` | ` \/ _ \ ``\ || | `  \| |  _| || | / _| ' \/ -_) _| / / ┃
#  ┃ \__,_|_||_\___/_||_\_, |_|_|_|_|\__|\_, |_\__|_||_\___\__|_\_\ ┃
#  ┃                    |__/             |__/___|                   ┃
#  ┃                 anonymity_check version 0.0.0.3                ┃
#  ┃              copyright © 2018-2024, Dr. Peter Netz             ┃
#  ┃                                                                ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
#
# Notice:
#   This bash script is produced independently from the Tor® anonymity software
#   and carries no guarantee from The Tor Project about quality, suitability or
#   anything else.
#
# Remark:
#   The icons for the notifications are stored in the temporary system
#   directory /tmp.
#
# To-Do:
#   Check the reverse lookup for DNS server.
#
# Changes:
#   Exit node list changes.
#
# BUGFIX:
#   GDBus.Error:org.freedesktop.DBus.Error.ServiceUnknown:
#   The name org.freedesktop.Notifications was not provided by any .service files
#
#   sudo nano /usr/share/dbus-1/services/org.freedesktop.Notifications.service
#
#   [D-BUS Service]
#   Name=org.freedesktop.Notifications
#   Exec=/usr/lib/notification-daemon/notification-daemon
#
#   See also:
#   [1] askubuntu.com/questions/1447877/why-do-i-get-gdbus-errororg-freedesktop-
#       dbus-error-serviceunknown-with-notify-s
#   [2] https://github.com/gnome-pomodoro/gnome-pomodoro/issues/344
################################################################################

# Make this script executable.
if [[ ! -x "$0" ]]; then chmod +x "$0"; fi

# Base64 encoded green onion icon.
read -r -d '' PICA <<'EOF'
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
rTLIvL89DZEjDgUzpNsplkgh9ao1qTI4T53iJCQoj0DUsUuATSezzlWPwfgkAFw2BbL6jUafhXKMU1IH
8NWvylifpfNu7vMrP9oTeJH33FnyO4GuJd7PD963SYHXCYtr1MZx+P0m7tdd8sgHY6Eulau9P2pLe5DU
8FCt7q7nhm8EPgweDpVcQJecq9YMrKh+RZMOgU4tBKPIMb9Me7BACoHqwJ56OrQJiz3TVq9+8coCp99v
31CnMhiJPlpKE/2KD53JJE4NIkW24D1fU59Op2pb9vDep4+0cHaafrPM93gToI8+czo0iuAqOr1vIJf2
CtvJWq3ksvrVaBFhoF85ko8WJd5+gs4QUAuvPXuma4YYvep/Lbb3x2hitshfckyb9v5/b2z400cEO8q4
u/8GHyM4lmHxT3AAAAGEaUNDUElDQyBwcm9maWxlAAB4nH2RPUjDUBSFT9NKi1Qc2kHEIWB1siAq4qhV
KEKFUCu06mDy+gtNGpIUF0fBteDgz2LVwcVZVwdXQRD8AXF2cFJ0kRLvSwotYrzweB/n3XN47z5AaFaZ
agbGAVWzjHQyIWZzq2LwFT5EEEIAwzIz9TlJSsGzvu6pm+ouzrO8+/6svnzBZIBPJJ5lumERbxBPb1o6
533iKCvLeeJz4jGDLkj8yHXF5TfOJYcFnhk1Mul54iixWOpipYtZ2VCJp4hjeVWjfCHrcp7zFme1Wmft
e/IXhgvayjLXaQ0hiUUsQYIIBXVUUIWFOO0aKSbSdJ7w8A86folcCrkqYORYQA0qZMcP/ge/Z2sWJyfc
pHAC6Hmx7Y8RILgLtBq2/X1s260TwP8MXGkdf60JzHyS3uhosSOgfxu4uO5oyh5wuQMMPOmyITuSn5ZQ
LALvZ/RNOSByC/SuuXNrn+P0AcjQrFI3wMEhMFqi7HWPd4e65/ZvT3t+PxuUcoSNrdsyAAANGmlUWHRY
TUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpy
ZVN6TlRjemtjOWQiPz4KPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0i
WE1QIENvcmUgNC40LjAtRXhpdjIiPgogPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9y
Zy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0i
IgogICAgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iCiAgICB4bWxu
czpzdEV2dD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlRXZlbnQjIgog
ICAgeG1sbnM6ZGM9Imh0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvIgogICAgeG1sbnM6R0lN
UD0iaHR0cDovL3d3dy5naW1wLm9yZy94bXAvIgogICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2Jl
LmNvbS90aWZmLzEuMC8iCiAgICB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8i
CiAgIHhtcE1NOkRvY3VtZW50SUQ9ImdpbXA6ZG9jaWQ6Z2ltcDpkYTIxODAzOS0zNDZjLTQ5ZTAtYmZi
NS03MzViMzg3MjI4MmYiCiAgIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6NDUyY2ViZjEtN2E1MC00
ZTkxLWE1ZTAtYjFmMjQxZmI2MGZlIgogICB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6
MDE4ZWM3MjQtNGZjMC00OGJmLWJiYjMtYmU0MTk4MzM0Y2VjIgogICBkYzpGb3JtYXQ9ImltYWdlL3Bu
ZyIKICAgR0lNUDpBUEk9IjIuMCIKICAgR0lNUDpQbGF0Zm9ybT0iTGludXgiCiAgIEdJTVA6VGltZVN0
YW1wPSIxNzA1NjUxNTA4ODU4NjYxIgogICBHSU1QOlZlcnNpb249IjIuMTAuMzAiCiAgIHRpZmY6T3Jp
ZW50YXRpb249IjEiCiAgIHhtcDpDcmVhdG9yVG9vbD0iR0lNUCAyLjEwIj4KICAgPHhtcE1NOkhpc3Rv
cnk+CiAgICA8cmRmOlNlcT4KICAgICA8cmRmOmxpCiAgICAgIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiCiAg
ICAgIHN0RXZ0OmNoYW5nZWQ9Ii8iCiAgICAgIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6MjQzZWFi
MDAtMjNhNy00NDE1LWJkMTQtNWI2NzIyZTM2Yjg3IgogICAgICBzdEV2dDpzb2Z0d2FyZUFnZW50PSJH
aW1wIDIuMTAgKExpbnV4KSIKICAgICAgc3RFdnQ6d2hlbj0iMjAyNC0wMS0xOVQwOTowNTowOCswMTow
MCIvPgogICAgPC9yZGY6U2VxPgogICA8L3htcE1NOkhpc3Rvcnk+CiAgPC9yZGY6RGVzY3JpcHRpb24+
CiA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAK
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgCjw/eHBhY2tldCBlbmQ9InciPz7jNmyfAAAA
BmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAB3RJTUUH6AETCAUINLDPQQAAFk5J
REFUeNrtm3lsXdedmL9z7vp28j3uokRKpEzKjmVbchxPFtiOUSPVFid2ZjAzTZcpMJ06LYJpJ0BXoBig
004RYDpFUTTwIG7aDFAPPIikRxlOMhPHibPYsZzGtixRkqmdosjHx7ffd7dz+scjKTOyJFKWnQKdAzzg
XfLee875zu/81vPgb9qaJj7Mzvbu3WsIISyttQB0IpEInnvuOfVB9LVv3z5pmqZx8ODB8FcO5MCBAwbg
SikLURQ9KoR4DLgH6ALkcr8aUMCsEOLnWuujwBEhxKIQwj906FD8PvqXWuuDwC6t9VNTU1OHl//+Ka31
f9da/+dUKvXMs88+G32gQPbt25cXQvxjYD8wBvTcwmuuADPAt6SUf3bo0KGljb5g//79/xb4w+XLQGu9
TwgRA0WlVFJKCfBXYRjufeGFF4LbDmT//v17gd8D9ixLAEILIiOimqvSzrQpO2WWrCWaZpNQhkgkUksy
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
z+Jv2v9/7f8Cwgwri46QwpsAAAAASUVORK5CYII=
EOF

# Base64 encoded red onion icon.
read -r -d '' PICB <<'EOF'
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
qI5XdX0m0yIqenz7e3tqYtR1rvPpb7LfxygJ7XAbOi6qz4bQMe77+cH79msY+Cz+enIApTglTX+7hfvt
HjND9Aby6BUMnnySarmb30U7tjzxQTj2WmT50QKocx1a3ISa09lVr48N5NEq5KnEXVlkGYt2I8F5negy
dZ8SRAQHzHtVZyA0k5r6x2Gc8R3yUnjoc8tMJnp3lasRbRiG12ML6Ot5GGJ7jwc9KZl05JsBKSMRA9Op
7UcnO+XKgCYdbJthTVWHuah/JywQFe/DlnTEPjMOhS4RDtzqo8K6GnKrU7u8PC7r9HKhy0Sq5nT+W9PO
H+XYdVsfW/n/AM/F01YwwtPGAAABhGlDQ1BJQ0MgcHJvZmlsZQAAeJx9kT1Iw1AUhU/TSotUHNpBxCFg
dbIgKuKoVShChVArtOpg8voLTRqSFBdHwbXg4M9i1cHFWVcHV0EQ/AFxdnBSdJES70sKLWK88Hgf591z
eO8+QGhWmWoGxgFVs4x0MiFmc6ti8BU+RBBCAMMyM/U5SUrBs77uqZvqLs6zvPv+rL58wWSATySeZbph
EW8QT29aOud94igry3nic+Ixgy5I/Mh1xeU3ziWHBZ4ZNTLpeeIosVjqYqWLWdlQiaeIY3lVo3wh63Ke
8xZntVpn7XvyF4YL2soy12kNIYlFLEGCCAV1VFCFhTjtGikm0nSe8PAPOn6JXAq5KmDkWEANKmTHD/4H
v2drFicn3KRwAuh5se2PESC4C7Qatv19bNutE8D/DFxpHX+tCcx8kt7oaLEjoH8buLjuaMoecLkDDDzp
siE7kp+WUCwC72f0TTkgcgv0rrlza5/j9AHI0KxSN8DBITBaoux1j3eHuuf2b097fj8blHKEja3bMgAA
DRppVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1w
Q2VoaUh6cmVTek5UY3prYzlkIj8+Cjx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6
eG1wdGs9IlhNUCBDb3JlIDQuNC4wLUV4aXYyIj4KIDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3
dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+CiAgPHJkZjpEZXNjcmlwdGlvbiByZGY6
YWJvdXQ9IiIKICAgIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIgog
ICAgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2
ZW50IyIKICAgIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIKICAgIHht
bG5zOkdJTVA9Imh0dHA6Ly93d3cuZ2ltcC5vcmcveG1wLyIKICAgIHhtbG5zOnRpZmY9Imh0dHA6Ly9u
cy5hZG9iZS5jb20vdGlmZi8xLjAvIgogICAgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hh
cC8xLjAvIgogICB4bXBNTTpEb2N1bWVudElEPSJnaW1wOmRvY2lkOmdpbXA6OTM4ZTZmY2QtM2Q1OS00
ZTFkLTk2ZjEtMzc3ZjAzN2NjNjI0IgogICB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOmMzMDViMDMw
LWFjNDktNGVjZS04ZDQxLTAxNTM4MDIxNDE3NCIKICAgeG1wTU06T3JpZ2luYWxEb2N1bWVudElEPSJ4
bXAuZGlkOjA1ZGZkNzkwLWEyMjUtNDgxZS1iYzUyLTJmMDk0YzVjY2I0MiIKICAgZGM6Rm9ybWF0PSJp
bWFnZS9wbmciCiAgIEdJTVA6QVBJPSIyLjAiCiAgIEdJTVA6UGxhdGZvcm09IkxpbnV4IgogICBHSU1Q
OlRpbWVTdGFtcD0iMTcwNTY1MTUyNzQwNDI2NiIKICAgR0lNUDpWZXJzaW9uPSIyLjEwLjMwIgogICB0
aWZmOk9yaWVudGF0aW9uPSIxIgogICB4bXA6Q3JlYXRvclRvb2w9IkdJTVAgMi4xMCI+CiAgIDx4bXBN
TTpIaXN0b3J5PgogICAgPHJkZjpTZXE+CiAgICAgPHJkZjpsaQogICAgICBzdEV2dDphY3Rpb249InNh
dmVkIgogICAgICBzdEV2dDpjaGFuZ2VkPSIvIgogICAgICBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlk
OjFiZTNiNzlkLTQ3ZjEtNGE4OC04NWRhLWRhMWM1NzY2MGRkYiIKICAgICAgc3RFdnQ6c29mdHdhcmVB
Z2VudD0iR2ltcCAyLjEwIChMaW51eCkiCiAgICAgIHN0RXZ0OndoZW49IjIwMjQtMDEtMTlUMDk6MDU6
MjcrMDE6MDAiLz4KICAgIDwvcmRmOlNlcT4KICAgPC94bXBNTTpIaXN0b3J5PgogIDwvcmRmOkRlc2Ny
aXB0aW9uPgogPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgIAo8P3hwYWNrZXQgZW5kPSJ3Ij8+
aKPQ9gAAAAZiS0dEAP8A/wD/oL2nkwAAAAlwSFlzAAAOwwAADsMBx2+oZAAAAAd0SU1FB+gBEwgFG7AO
jp8AABcKSURBVHja7Zt7fJ1Vme+/a723fd/J3mnapGmbNoWmMC20BWRQdBDoYdq0gCIeburIHECcETnK
Z3RwPjOHj+Co4H1wFARxYKCI0nQHQWBEDxwQbIERei8pvafJTrKTfX8va50/shMa6CVpC57P58zzT7KT
vd611vd9nmc967feF/7Lxpl4Lztbvny5IYSwtNYC0OFw2H3kkUfUu9FXR0eHNE3TWL16tfcnB7Jy5UoD
CEkp077vnyuEWAqcAtQBstavBhSwVwjxitZ6HfCYEKJfCFHt7OwMjqF/qbVeDSzWWl/f1dW1pvb3s7XW
/6q1/k40Gr131apV/rsKpKOjIyWE+AywAmgDGg78v57YXdkPdAOPSinv7uzsHJzsOFasWPEPwC21j67W
ukMIEQAZpVRESgnwtOd5y5944gn3uANZsWLFcuA6YFnNA/CFIOz7nD00xJJKhbqBAeoGB4kWi4Q8Dy0l
vpQMx+O8UlfH0+k0u2wbIxymFI1iaD06uF9pre/q6upaPZGxLFu2zDEMYzvQVCqVGMgN0NTUpAxhFKrV
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
EOF

# Base64 encoded red error icon.
read -r -d '' PICE <<'EOF'
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBI
WXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gQCCDQzwji9OwAACOZJREFUWMONl2mMHMUVx39V1T0z
u7PeXbwXvogPjIwd8MVhE1+YGDDicLgkRBKJkEQRyYd8QBFIkXAUgpRwSDlQADmOSWwUgpI4kEgh
BoIhYBmwMfhaX9jrPez1sTs7u56ZPqpePnTvrHcNUkqqqe5Rdb3/+1e9/3ulAAQAFCOjwkNTg6YO
TR432E9mY5HLYsfsUJgVCZeL0AKIQK+n2asV7ZFizw8zHKxpJKQHky6fmkjGYUMASs43mnRNM1o8
jHJovkz56bd51sJyJ8yKBWKgLZ9jXL4GEaEwVKK3HGIAD0Qp9ip4/cfCwwLGAiYFohLAI97K+cYN
miaMEzxtMc8VuaXoWKeF2sZ8LdMmNDFzUhuTWy4CEWIrCAJK44Bjp/o41N3L0d6zFEsVUJzxFPc/
6nhzCKgDN5YJJaABjY+iBY8Kvuqj+KTmY4R5NZ7hlkVX0Dwuj68VLrY4JyCCS31xCgSF0xqlDaUo
5vTgEP/6aB+htSjF9seERcLIllSZEDAYNBfjUcJ/L6B5W4VtBlrnTpvMyrmXUSlXkDhGrANnEZHE
BREcCqdUFYBTGqc1ojQm4/Pmrv20d59CKY7OEBZ8HQZJmVAgShQ+bXgS4Ot+ik9pTseO5nuXzGVi
Qx0SRoi1EMdgHSIWhhlI+XRKI0phtUG0xiqNMyYZtaGrr8A/du4jozi6VpjeD7pxmAlpICs+GWvJ
/HqArVox545FVzKxvg4XhkgUoWxMFEV4Iolx50YdbacUknrutKGEIuP7xNokoIzh2Jl+3vqkHeCD
tbA4Tg6s09RglMNsGOIuEeYsmDGFCfV5bBBAFGKikNe6e9kSCCoIIAxQcYSKwrRH571HnKtU2FwK
6SkU0DYGG+PimMlNDcyc2Apwzc9glZfgV5oQQxPxgOX5hpzP0tnTcUGyuI5CdvQN4K+6lTt3HWTH
lEtxpRJEUWK4ajzCxDFhUOGVWPPg29to/O0fODE4hE63TyLLdbNm4BlDBH9RKYEaD371Get8BTcu
mE25VIH0o83dvfQuW8WaF34PwLWbX2fvdSshCMBZlLNgLcpaikHIxkKZh97fQc34JqYuWUrTcxvo
6OpGiyDOEUURK664DKXIr4XnFYg+UqbOwTXj6/I01dVAFEIUQRDypeuWs+aFDVXV8jzD/N9t4tPL
5xJXKuAE7RxBFPGSyvLdXe3kxo2rzr9k8RIWvvw3XLkMzuKso74mR202i8CSlyCjtwfMsY5pMyc2
J0jj4VBzLDh2ADl75nzhxPd9Fvx9C/uW3YSEAYU4ZlOkeeij3eRbW0GdL7RQ/OVTKKNBHDiHZzRT
WsbjYPZ+mKmHHFfGApdOasPGFsSCdSCCPTdEuPIq5PixUYt6nmHe+pc4NvdqNkqGb+3cT66+YdQc
nOP0TUsI9+0BJ4gVEIezjiktTdgkChbqsrCg1lNclK9FnEOsIOKScLMWqZQIb12O9J4cxUQmk2H6
n17lwa3bqW1pucDzgbtXI50dSbiKA3GICM4JDbU5bKJGi3TkmDOp+SKiOIaqwiU/1RRWKRPesBDp
7BhlJJuvo3HqtNGexzHF5VcR7fkEUangunQHZNg5GF+TxcFM7aCtPl9D7BJlE5LRyYhoIw4plQhW
L4ExIMa2c2tWYbs6QGskXcOma4qAc0LsHHW5LECTdqBBJZNlRN2qlIpGUKA1g+eGWHfbjThrP9f4
kW/cQ7DrIzA6yRFUVRsRlzAAiFStaA2cLZYroBVOK5zSWDROKRw6yXRKEVjh5Uhz35Z30cZ8LoAp
6zbSfv1qgiDEATYFYVX6nDIgAueCEKCgtWJv59kBjPFwJN5KCkS0Am0oOmG9ruHbe46Qb275Qvoz
2SxXr9/E0XnXYK3DaY1VCpcynB48BOgrVVBwRHvwQX8QUQyChAGTJBCnNVYbyiJsKlb4zvs7yDU2
XnDa7c4PR737vs/CV17j4FdWUAkjYlTSVZrHRBgolYcrog+10ezygINdpxBtsGlGs8ajKPAiOb5/
qIu61rYLTvvQ7SsZeuBeXHfXaCYyGZau+yPHZl9JbB0WhRWwAqI0JwsD6ISN93Rrlk+0oqv9xOmU
Mo01Gqs1fz1T5Htbt5FraLgwzr+6mGDfHqJSib5br8d2Hh8jVh4r/rwZt3QFNo6r5yGKHcfP9KPg
UCMc1vfN4KzAztMDg5wdLGHTHB4L/ODnvyA/1nPn6L/rZsITPVgvg/V8wiDg5NduJO7qHK0TmQxT
v/kAcSabMiAMVsqUKhWA3Q9DWYnCbFD4xx3ltsZx3Ll4PuVSGWUtVErULLuB5qd/U1301OplxMc7
kqhJqxKrFFYEV1vH1H++gdd6MQAnX1xPxzNP4pTCojDG463d7VSikMfTwlgjyAOOitY80l0Y5NOO
HpwxxEYT52oZfOc/FF54FpzjxH1rKJ84SZTJEukMkfEJPZ/QeERehiiKOXD7zYQ9PQz89x06nnkK
pzQxSSQcOnmKchSi4aHz7wUqBP2+IrMV9hulLrnt2nkqn/WTXO8ECSr4EycT93QlpeywrqPSERwK
C1gn6NY2gkKBOIyScs3BUBiy7cBhATomwMxHIC6OuRfwCuT3Kk5FQu7uRfOpzfpJJSwuHUcSVaJu
MiK1w+UiSbxbGQF3Lgh598BhPBh6HMYBtAOzSO4EQpKE5R7FoBbme1B57cNd0nGmD+P7xCjscIQo
Q6w1sdZEWhMqTYwmVkm8R2nIOUAbQ/fZAtsOHBEPznlwBcBPU+PVq5lKUKjhWn0T1B6AwzFMmNA4
jgUzplKXyyLOYV3CwrC+VwtlklRLui3FcoXdx7soVgIMdD4Ol3yeeurUOMNFYgTqfihdDNN9eKK3
MMiWj/fwxu52uvoGcIDnZVDp5cNpDVpjjIcV6OkfYNuho2w/9BlDlQAfHs3BjGHPx7aqupx/YRRQ
J4CJIE9ATRleBWZbmBgD9Rmf1oZ68rkcIsJQucKpgSKDcYyf7GsnsLce7vgRhI8BP/mC/KHG/jEG
SPX5MWgC5jq4QeBqgUuBSQKioRs4pOADBf/WsGctFPg/2v8ACj7/HgquOoYAAAAASUVORK5CYII=
EOF

# Set the temporary path.
TMPPATH="/tmp"

# Set the filenames of the images.
ERRIMG=errimg.png
GONION=gonion.png
RONION=ronion.png

# Define the global strings.
STRING1='Congratulations. You are using Tor.'
STRING2='Sorry. You are NOT using Tor.'

# Set some global variables.
FP="${TMPPATH}/tor_exit_nodes_list.txt"
UA='Mozilla/5.0 (Windows NT 6.1; rv:52.0) Gecko/20100101 Firefox/52.0'
TORURL='https://check.torproject.org'

# Set the domain name.
#DOMAINNAME='www.example.org'
#DOMAINNAME='www.iana.org'
DOMAINNAME='www.icann.org'

# Set the message color.
ESC="\e["
FG=15
BG0=22
BG1=124
MSG0="${ESC}0;38;5;${FG};48;5;${BG0}m"
MSG1="${ESC}0;38;5;${FG};48;5;${BG1}m"
RESC="${ESC}0m"

# ==============================================================================
# Function header()
# ==============================================================================
function header() {
# Declare the local variables.
local fg=15
local bg=202
local msgcol="\e[0;38;5;${fg};48;5;${bg}m"
local rstcol="\e[0m"
# Set color.
echo -ne "\e[44m"
# Show heredoc.
cat << "HEREDOC"
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃                               _ _             _           _    ┃
┃  __ _ _ _  ___ _ _ _  _ _ __ (_) |_ _  _   __| |_  ___ __| |__ ┃
┃ / _` | ' \/ _ \ ' \ || | '  \| |  _| || | / _| ' \/ -_) _| / / ┃
┃ \__,_|_||_\___/_||_\_, |_|_|_|_|\__|\_, |_\__|_||_\___\__|_\_\ ┃
┃                    |__/             |__/___|                   ┃
┃                 anonymity_check version 0.0.0.2                ┃
┃              copyright © 2018-2024, Dr. Peter Netz             ┃
┃                                                                ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
HEREDOC
# Reset color.
echo -ne "\e[49m"
# Add empty line.
echo -en "\n"
# Add remark.
cat << "HEREDOC"
Please keep in mind, when you are using this Bash script, that it
is produced completely independently from the Tor® anonymity soft-
ware and carries no guarantee from The Tor Project about quality,
suitability or anything else.
HEREDOC
# Write message into the terminal window.
#echo -e "\n\e[46mExit the program with CTRL+C\e[49m\n"
echo -e "\n${msgcol}Exit the program with CTRL+C${rstcol}\n"
# Return the exit code 0.
return 0
}

# ==============================================================================
# Function trap_sigint()
# The function is called by trap
# ==============================================================================
function trap_sigint() {
    # Declare the local variables.
    local ch
    local str
    # Set the filler character.
    ch='\u0020'
    # Set the filler string.
    str=$(printf '%*b' 80 | tr ' ' "${ch}")
    # Write two messages into the terminal window.
    printf "\r%s%s" "SIGINT caught" "${str}"
    printf "\r%s\n" "You pressed CTRL+C"
    # Exit script with exit code 130.
    exit 130
}

# ==============================================================================
# Function make_errimg()
# ==============================================================================
function make_errimg() {
    # Declare the local variables.
    local pic="${TMPPATH}/${ERRIMG}"
    local cs0
    local cs1
    cs0=$(echo "${PICE}" | base64 --decode | shasum | awk -F ' ' '{print $1}')
    cs1=$(shasum "${pic}" 2>/dev/null | awk -F ' ' '{print $1}')
    if [[ "${cs0}" != "${cs1}" ]]; then
        # Decode the base64 image and store it.
        echo "${PICE}" | base64 --decode > "${pic}"
        #mogrify -resize 24x24 "${pic}"
    fi
    # Return the exit code 0.
    return 0
}

# ==============================================================================
# Function make_gonion()
# ==============================================================================
function make_gonion() {
    # Declare the local variables.
    local pic="${TMPPATH}/${GONION}"
    local cs0
    local cs1
    cs0=$(echo "${PICA}" | base64 --decode | shasum | awk -F ' ' '{print $1}')
    cs1=$(shasum "${pic}" 2>/dev/null | awk -F ' ' '{print $1}')
    if [[ "${cs0}" != "${cs1}" ]]; then
        # Decode the base64 image and store it.
        echo "${PICA}" | base64 --decode > "${pic}"
        #mogrify -resize 24x24 "${pic}"
    fi
    # Return the exit code 0.
    return 0
}

# ==============================================================================
# Function make_ronion()
# ==============================================================================
function make_ronion() {
    # Declare the local variables.
    local pic="${TMPPATH}/${RONION}"
    local cs0
    local cs1
    cs0=$(echo "${PICB}" | base64 --decode | shasum | awk -F ' ' '{print $1}')
    cs1=$(shasum "${pic}" 2>/dev/null | awk -F ' ' '{print $1}')
    if [[ "${cs0}" != "${cs1}" ]]; then
        # Decode the base64 image and store it.
        echo "${PICB}" | base64 --decode > "${pic}"
        #mogrify -resize 24x24 "${pic}"
    fi
    # Return the exit code 0.
    return 0
}

# ==============================================================================
# Function curllist()
# ==============================================================================
function curllist() {
    # Declare the local variable status.
    local status
    # Set the local variable url.
    #local url='https://check.torproject.org/cgi-bin/TorBulkExitList.py?ip=1.1.1.1'
    local url='https://check.torproject.org/torbulkexitlist'
    # Try to download the TOR exit node list.
    timeout 5s curl -s -A "${UA}" "${url}" -o "${FP}"
    # Store the exit code of the last operation.
    status=$?
    # Evaluate the exit code. 124 from timeout. All other from curl.
    if [[ "${status}" == "124" ]]; then
        echo -e "CURL timeout. TOR exit node list could not be downloaded!\n"
        # Leave the function with an error.
        return 1
    elif [[ "${status}" != 0 ]]; then
        echo -e "CURL error. TOR exit node list could not be downloaded!\n"
        # Leave the function with an error.
        return 1
    fi
    # Return the exit code 0.
    return 0
}

# ==============================================================================
# Function tor_exit_nodes_list()
# ==============================================================================
function tor_exit_nodes_list() {
    # Check if the file with the tor exit nodes list not exist.
    if [ -f "${FP}" ]; then
        # Get the date.
        dateo=$(sed -n '3p' "${FP}" | awk -F ' on ' '{print $2}' | sed 's/#$//')
        # Convert the date.
        odate=$(date -d"${dateo}" "+%Y%m%d %H:%M:%S" 2>/dev/null)
        # Get the date.
        daten=$(timeout 5s curl -s -I "${url}" | grep "Last-Modified" | awk -F ': ' '{print $2}')
        # Convert the date.
        ndate=$(date -d"${daten}" "+%Y%m%d %H:%M:%S" 2>/dev/null)
        # Compare the dates.
        if [[ ( "${odate}" != "" ) && ( "${odate}" != "${ndate}" ) ]]; then
            curllist
        fi
    else
        curllist
    fi
    # Return the exit code 0.
    return 0
}

# ==============================================================================
# Function curlerr()
#
# References:
# http://tldp.org/LDP/abs/html/exitcodes.html
# https://curl.haxx.se/libcurl/c/libcurl-errors.html
# ==============================================================================
function curlerr() {
    # Assign the function parameter to a local variable.
    local errorcode=$1
    # Declare the local variables.
    local output='n/a'
    # Check the exit code.
    case "${errorcode}" in
        0)  output='CURLE_OK (0)';;
        1)  output='CURLE_UNSUPPORTED_PROTOCOL (1)';;
        2)  output='CURLE_FAILED_INIT (2)';;
        3)  output='CURLE_URL_MALFORMAT (3)';;
        4)  output='CURLE_NOT_BUILT_IN (4)';;
        5)  output='CURLE_COULDNT_RESOLVE_PROXY (5)';;
        6)  output='CURLE_COULDNT_RESOLVE_HOST (6)';;
        7)  output='CURLE_COULDNT_CONNECT (7)';;
        8)  output='CURLE_FTP_WEIRD_SERVER_REPLY (8)';;
        9)  output='CURLE_REMOTE_ACCESS_DENIED (9)';;
        10) output='CURLE_FTP_ACCEPT_FAILED (10)';;
        11) output='CURLE_FTP_WEIRD_PASS_REPLY (11)';;
        12) output='CURLE_FTP_ACCEPT_TIMEOUT (12)';;
        13) output='CURLE_FTP_WEIRD_PASV_REPLY (13)';;
        14) output='CURLE_FTP_WEIRD_227_FORMAT (14)';;
        15) output='CURLE_FTP_CANT_GET_HOST (15)';;
        16) output='CURLE_HTTP2 (16)';;
        17) output='CURLE_FTP_COULDNT_SET_TYPE (17)';;
        18) output='CURLE_PARTIAL_FILE (18)';;
        19) output='CURLE_FTP_COULDNT_RETR_FILE (19)';;
        20) output='n/a';;
        21) output='CURLE_QUOTE_ERROR (21)';;
        30) output='CURLE_FTP_PORT_FAILED (30)';;
        31) output='CURLE_FTP_COULDNT_USE_REST (31)';;
        32) output='n/a';;
        33) output='CURLE_RANGE_ERROR (33)';;
        34) output='CURLE_HTTP_POST_ERROR (34)';;
        35) output='CURLE_SSL_CONNECT_ERROR (35)';;
        36) output='CURLE_BAD_DOWNLOAD_RESUME (36)';;
        37) output='CURLE_FILE_COULDNT_READ_FILE (37)';;
        38) output='CURLE_LDAP_CANNOT_BIND (38)';;
        39) output='CURLE_LDAP_SEARCH_FAILED (39)';;
        40) output='n/a';;
        41) output='CURLE_FUNCTION_NOT_FOUND (41)';;
        42) output='CURLE_ABORTED_BY_CALLBACK (42)';;
        43) output='CURLE_BAD_FUNCTION_ARGUMENT (43)';;
        44) output='n/a';;
        45) output='CURLE_INTERFACE_FAILED (45)';;
        46) output='n/a';;
        47) output='CURLE_TOO_MANY_REDIRECTS (47)';;
        48) output='CURLE_UNKNOWN_OPTION (48)';;
        49) output='CURLE_TELNET_OPTION_SYNTAX (49)';;
        50) output='n/a';;
        51) output='CURLE_PEER_FAILED_VERIFICATION (51)';;
        52) output='CURLE_GOT_NOTHING (52)';;
        53) output='CURLE_SSL_ENGINE_NOTFOUND (53)';;
        54) output='CURLE_SSL_ENGINE_SETFAILED (54)';;
        55) output='CURLE_SEND_ERROR (55)';;
        56) output='CURLE_RECV_ERROR (56)';;
        57) output='n/a';;
        58) output='CURLE_SSL_CERTPROBLEM (58)';;
        59) output='CURLE_SSL_CIPHER (59)';;
        60) output='CURLE_SSL_CACERT (60)';;
        61) output='CURLE_BAD_CONTENT_ENCODING (61)';;
        62) output='CURLE_LDAP_INVALID_URL (62)';;
        63) output='CURLE_FILESIZE_EXCEEDED (63)';;
        64) output='CURLE_USE_SSL_FAILED (64)';;
        65) output='CURLE_SEND_FAIL_REWIND (65)';;
        66) output='CURLE_SSL_ENGINE_INITFAILED (66)';;
        67) output='CURLE_LOGIN_DENIED (67)';;
        68) output='CURLE_TFTP_NOTFOUND (68)';;
        69) output='CURLE_TFTP_PERM (69)';;
        70) output='CURLE_REMOTE_DISK_FULL (70)';;
        71) output='CURLE_TFTP_ILLEGAL (71)';;
        72) output='CURLE_TFTP_UNKNOWNID (72)';;
        73) output='CURLE_REMOTE_FILE_EXISTS (73)';;
        74) output='CURLE_TFTP_NOSUCHUSER (74)';;
        75) output='CURLE_CONV_FAILED (75)';;
        76) output='CURLE_CONV_REQD (76)';;
        77) output='CURLE_SSL_CACERT_BADFILE (77)';;
        78) output='CURLE_REMOTE_FILE_NOT_FOUND (78)';;
        79) output='CURLE_SSH (79)';;
        80) output='CURLE_SSL_SHUTDOWN_FAILED (80)';;
        81) output='CURLE_AGAIN (81)';;
        82) output='CURLE_SSL_CRL_BADFILE (82)';;
        83) output='CURLE_SSL_ISSUER_ERROR (83)';;
        84) output='CURLE_FTP_PRET_FAILED (84)';;
        85) output='CURLE_RTSP_CSEQ_ERROR (85)';;
        86) output='CURLE_RTSP_SESSION_ERROR (86)';;
        87) output='CURLE_FTP_BAD_FILE_LIST (87)';;
        88) output='CURLE_CHUNK_FAILED (88)';;
        89) output='CURLE_NO_CONNECTION_AVAILABLE (89)';;
        90) output='CURLE_SSL_PINNEDPUBKEYNOTMATCH (90)';;
        91) output='CURLE_SSL_INVALIDCERTSTATUS (91)';;
        92) output='CURLE_HTTP2_STREAM (92)';;
        93) output='CURLE_RECURSIVE_API_CALL (93)';;
        *)  output='UNKNOWN_CURL_ERROR';;
    esac
    # Output the curl error variable.
    echo -n "${output}"
    # Return the exit code 0.
    return 0
}

# ==============================================================================
# Function geolocdata0()
# ==============================================================================
function geolocdata0() {
    # Assign the function parameter to the local variable.
    local ipaddr=$1
    # Declare the local variabes.
    local response
    local validdata
    # Try to get the geolocation data.
    response=$(timeout 20s curl -s "ip-api.com/${ipaddr}")
    if [[ "${response}" == "" ]]; then
        echo ""
        return 1
    fi
    # Check if the data are valid.
    validdata=$(echo "${response}" | grep -i -o "country")
    if [[ "${validdata}" != "" ]]; then
        # Remove color escape sequences from the data.
        output=$(echo "${response}" | sed -r 's/\x1b\[[0-9;]*m?//g')
        # Remove curly braces, double quotes, leading spaces and trailing comma.
        output=$(echo "${output}" | \
                 sed 's/[{}]/''/g; s/["]/''/g; s/^[ \t]*/    /; s/,$//')
        # Change the first character from lower case to upper case.
        output=$(echo "${output}" | sed 's/\b\(.\)/\u\1/g')
        # Output the data.
        echo "$output"
    fi
    # Return the exit code 0.
    return 0
}

# ==============================================================================
# Function geolocdata1()
# ==============================================================================
function geolocdata1() {
    # Assign the function parameter to the local variable.
    local ipaddr=$1
    # Declare the local variabes.
    local response
    local validdata
    # Try to get the geolocation data.
    response=$(curl -s "ipinfo.io/${ipaddr}")
    # Check if the data are valid.
    validdata=$(echo "${response}" | grep -i -o "country")
    if [[ "${validdata}" != "" ]]; then
        # Remove color escape sequences from the data.
        output=$(echo "${response}" | sed -r 's/\x1b\[[0-9;]*m?//g')
        # Remove curly braces, double quotes, leading spaces and trailing comma.
        output=$(echo "${output}" | \
                 sed 's/[{}]/''/g; s/["]/''/g; s/^[ \t]*/    /; s/,$//')
        # Change the first character from lower case to upper case.
        output=$(echo "${output}" | sed 's/\b\(.\)/\u\1/g')
        # Output the data.
        echo "$output"
    fi
    # Return the exit code 0.
    return 0
}

# ==============================================================================
# Function geolocdata2()
# ==============================================================================
function geolocdata2() {
    # Assign the function parameter to the local variable.
    local ipaddr=$1
    # Declare the local variabes.
    local response
    local validdata
    # Try to get the geolocation data.
    response=$(curl -s "extreme-ip-lookup.com/json/${ipaddr}")
    # Check if the data are valid.
    validdata=$(echo "${response}" | grep -i -o "country")
    if [[ "${validdata}" != "" ]]; then
        # Remove color escape sequences from the data.
        output=$(echo "${response}" | sed -r 's/\x1b\[[0-9;]*m?//g')
        # Remove curly braces, double quotes, leading spaces and trailing comma.
        output=$(echo "${output}" | \
                 sed 's/[{}]/''/g; s/["]/''/g; s/^[ \t]*/    /; s/,$//')
        # Change the first character from lower case to upper case.
        output=$(echo "${output}" | sed 's/\b\(.\)/\u\1/g')
        # Output the data.
        echo "$output"
    fi
    # Return the exit code 0.
    return 0
}

# ==============================================================================
# Function getipaddr()
# ==============================================================================
function getipaddr() {
    # Assign the function parameter to the local variable.
    local html=$1
    local pattern2='Your IP address appears to be:'
    local status
    local line=$(echo "$html" | grep "$pattern2")
    local ip="$(grep -oE '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' <<< "$line")"
    echo -e "\n\e[45mYour IP address appears to be: $ip\e[49m"
    local exitn=$(grep "${ip}" "${FP}")
    if [[ "${exitn}" == "${ip}" ]]; then
        printf "\n    %-17s%s\n" "Exitnode (IP):" "$exitn"
        res=$(tor-resolve -x "${exitn}" 2>/dev/null)
        status=$?
        if [[ ${status} == 0 ]]; then
            printf "    %-17s%s\n" "Exitnode (HOST):" "$res"
        else
            printf "    %-17s%s\n" "Exitnode (HOST):" "n/a"
        fi
    else
        echo -e "\n${MSG1}Exit node could not be verified!${RESC}"
    fi
    geolocdata0 "${ip}"
    #geolocdata1 "${ip}"
    #geolocdata2 "${ip}"
    # Return the exit code 0.
    return 0
}

# ==============================================================================
# Function gethtml()
# ==============================================================================
function gethtml() {
    # Declare the local variable html.
    local html=''
    local icon="${TMPPATH}/${ERRIMG}"
    local string="Unexpected CURL Error:"
    # Curl the html data.
    html=$(curl -s -A "${UA}" "${TORURL}")
    # Store the exit code of the last command.
    status=$?
    if [ ${status} -ne 0 ]; then
        str0=$(printf %40s ' ')
        # Output error message.
        local exp=''
        exp=$(curlerr ${status})
        echo -e "\n\e[41mUnexpected CURL Error: ${exp}\e[49m"
        DISPLAY=:0 sudo -u "${SUDO_USER}" \
        notify-send -t 5000 -i "$icon" "${string}$str0" "${exp}" 2>/dev/null
        # Return exit code.
        return 1
    fi
    # Output the html data.
    echo "${html}"

    echo "PETER"
    # Return the exit code 0.
    return 0
}

# ==============================================================================
# Function check_tor()
# ==============================================================================
function check_tor() {
    # Declare the local variable.
    local html
    local status
    # Define the search pattern ot interest.
    local pattern0='Congratulations. This browser is configured to use Tor.'
    local pattern1='Sorry. You are not using Tor.'
    # Get the html data from the torproject website.
    html=$(gethtml)
    # Grep the search pattern and store the exit code.
    echo "${html}" | grep -o -q "${pattern0}"
    status=$?
    if [ ${status} -eq 0 ]; then
        getipaddr "$html"
        echo -e "\e[42m${STRING1}\e[49m"
        DISPLAY=:0 sudo -u "${SUDO_USER}" \
            notify-send -t 5000 -i "$TMPPATH/$GONION" "$STRING1" '' 2>/dev/null
        return 0
    fi
    # Grep the search pattern and store the exit code.
    echo "${html}" | grep -o -q "${pattern1}"
    status=$?
    if [ ${status} -eq 0 ]; then
        getipaddr "$html"
        echo -e "\e[41m${STRING2}\e[49m"
        DISPLAY=:0 sudo -u "${SUDO_USER}" \
            notify-send -t 5000 -i "$TMPPATH/$RONION" "$STRING2" 2>/dev/null
        return 0
    fi
    # Unknown error handling.
    local msgp1="An unexpected error has occurred."
    local msgp2="TOR probably won't work."
    echo -e "\e[41m${msgp1} ${msgp2}\e[49m"
    DISPLAY=:0 sudo -u "${SUDO_USER}" \
        notify-send -t 5000 -i "$TMPPATH/$ERRIMG" "${msgp1}" "${msgp2}" \
        2>/dev/null
    # Return the exit code 0.
    return 0
}

# ==============================================================================
# Function check_dns()
# ==============================================================================
function check_dns() {
    # Declare the local variables.
    local status
    local domain
    local ipaddr
    # Get the answwer from dig.
    ipaddr=$(dig +short "${DOMAINNAME}")
    # Use only IP addresses.
    ipaddr=$(echo "${ipaddr}" | \
             grep -oE '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')
    if [[ "${ipaddr}" != "" ]]; then
        echo -e "${MSG0}DNS is working!${RESC}"
        printf "    %s -> %s\n" "${DOMAINNAME}" "${ipaddr}"
    else
        echo -e "${MSG1}DNS is NOT working!${RESC}"
        return 1
    fi
    # Reverse lookup.
    domain=$(nslookup "${ipaddr}" | grep name | \
             awk -F 'name = ' '{print $2}' | sed 's/.$//')
    if [[ $domain != "" ]]; then
        printf "    %s -> %s\n" "${ipaddr}" "${domain}"
    else
        printf "    %s -> %s\n" "${ipaddr}" "n/a"
    fi
    if [[ "${DOMAINNAME}" == "${domain}"  ]]; then
        printf "    ${MSG0}%s${RESC}\n" "Domain name resolution is OK"
    else
        printf "    ${MSG1}%s${RESC}\n" "Domain name resolution is NOT OK"
    fi
    # Return the exit code 0.
    return 0
}

# ==============================================================================
# Function check_tordns()
# ==============================================================================
function check_tordns() {
    # Declare the local variables.
    local ipaddr status domain
    # Set the local variables.
    local str0="Domain name resolution is OK"
    local str1="Domain name resolution is NOT OK"
    # Set the local unicode character.
    local char='\u0020'
    # Create the fill string.
    fill=$(printf "${char}%.0s" {1..4})
    # Get the IP address. Store the exit code.
    ipaddr=$(timeout 30 tor-resolve "${DOMAINNAME}" 2>/dev/null)
    status=$?
    if [[ "${status}" == "0" ]]; then
        echo -e "${MSG0}TorDNS is working!${RESC}"
        printf "    %s -> %s\n" "${DOMAINNAME}" "${ipaddr}"
    else
        echo -e "${MSG1}TorDNS is NOT working!${RESC}\n"
        return 1
    fi
    # Reverse lookup.
    domain=$(tor-resolve -x "${ipaddr}" 2>/dev/null | xargs)
    status=$?
    if [[ "${status}" == "0" ]]; then
        printf "${fill}%s -> %s\n" "${ipaddr}" "${domain}"
    else
        printf "${fill}%s -> %s\n" "${ipaddr}" "n/a"
    fi
    if [[ "${DOMAINNAME}" == "${domain}"  ]]; then
        printf "    ${MSG0}%s${RESC}\n\n" "${str0}"
    else
        printf "    ${MSG1}%s${RESC}\n\n" "${str1}"
    fi
    # Return the exit code 0.
    return 0
}

# ==============================================================================
# Function perfom_pings()
# ==============================================================================
function perform_pings() {
    # Declare the local variables.
    local fill answer status domain
    # Set the local strings.
    local str0="Name resolution is OK"
    local str1="Name resolution is NOT OK"
    # Set the local unicode character.
    local char='\u0020'
    # Create the fill string.
    fill=$(printf "${char}%.0s" {1..4})
    # Perform 5 pings. Ignore error messages. Store the exit code.
    #answer=$(ping -c 5 "${DOMAINNAME}" 2>/dev/null)
    answer=$(ping -c 5 "www.example.org" 2>/dev/null)
    status=$?
    # Evaluate the value of the exit code.
    if [ ${status} -eq 0 ]; then
        echo -e "\n${MSG0}PING is working!${RESC}"
        # Remove empty lines. Remove the ping responses. Remove
        # the statistics headline. Add 4 spaces to each line.
        answer=$(echo "${answer}" | \
                 sed '/^\s*$/d; /statistics/d; /from/d; s/^/    /')
        echo -e "${answer}"
        domain=$(echo "${answer}" | grep PING | awk -F ' ' '{print $2}')
        if [[ "${DOMAINNAME}" != "${domain}"  ]]; then
            printf "${fill}\e[100mNotice: %s = %s\e[49m\n" "${domain}" "${DOMAINNAME}"
        fi
    else
        echo -e "\n${MSG1}PING is NOT working!${RESC}"
    fi
    # Return the exit code 0.
    return 0
}

# ==============================================================================
# Function TorInitStatus()
# ==============================================================================
function TorInitStatus() {
    # Declare the local variable.
    local reqstat
    # Initialise some local variables.
    local prev='The TOR service has'
    local post='been initiated at boot!'
    # Request informations about the TOR service.
    reqstat=$(service tor 2>&1 | grep -o "unrecognized service")
    # Check if the TOR service has been initiated.
    if [[ "${reqstat}" == "" ]]; then
        # Write a message into the terminal window.
        echo -e "${MSG0}${prev} ${post}${RESC}\n"
    else
        # Write a message into the terminal window.
        echo -e "${MSG1}${prev} NOT ${post}${RESC}\n"
    fi
    # Return the exit code 0.
    return 0
}

# ==============================================================================
# Function isTorRunning()
# ==============================================================================
function isTorRunning() {
    # Declare some local variables.
    local reqstat
    # Initialise some local variable.
    local prev='The TOR service is'
    local post='running!'
    local str0="tor is running"
    local str1="tor is not running"
    # Request the status of the tor service.
    reqstat=$(service tor status)
    status=$?
    # Evaluate the exit status of the tor service.
    if [[ ( "${status}" == "0" ) || ( "${status}" == "3" ) || ( "${status}" == "4" ) ]]; then
        (echo "${reqstat}" | grep -o -q "${str0}"; exit "${PIPESTATUS[1]}")
        status=$?
        if [[ "${status}" == "0" ]]; then
            echo -e "${MSG0}${prev} ${post}${RESC}\n"
        fi
        (echo "${reqstat}" | grep -o -q "${str1}"; exit "${PIPESTATUS[1]}")
        status=$?
        if [[ "${status}" == "0" ]]; then
            echo -e "${MSG1}${prev} NOT ${post}${RESC}\n"
        fi
    fi
    # Return the exit code 0.
    return 0
}

# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# Main Script Section
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

# Trap SIGINT.
trap 'trap_sigint' SIGINT

# Clear screen
reset

# Call function.
header

# Download the newest tor exit nodes list.
tor_exit_nodes_list

# Check if the TOR service has been initiated.
TorInitStatus

# Check if the TOR service is running.
isTorRunning

# Check TorDNS.
check_tordns

# Check DNS.
check_dns

# Check ping.
perform_pings

# Make the images.
make_errimg
make_gonion
make_ronion

# Call the function.
check_tor

# Print elapsed time to screen.
echo -e "\nElapsed time: $SECONDS Seconds"

# Farewell message.
echo -e "\nHave a nice day. Bye!"

# Exit the script.
exit 0
